
; This is the code to setup a default IDT and the default handlers. They are
; replaced later in the different subsystems by the real handlers. All handlers
; assume that the DATA32 seg descriptor is valid. Remember, these are default
; minimal handlers used for debugging and such, and not to repair any problems.


%include "config.h"
%include "descriptor.h"
%include "debug.h"


extern Halt
extern Printk
extern PrintB
extern PrintW
extern PrintD
global InitIDT


	section .text

start:
;=== InitIDT ===================================================================
InitIDT:
	; patch gates to use right addresses
	mov		ecx, idt_size/8
	mov		eax, start
	mov		esi, idt_start
.patch:
	add		[esi], ax
	ror		eax, 16
	add		[esi+6], ax
	ror		eax, 16
	add		esi, 8
	loop	.patch

	; copy IDT to final position (0x00000000)
	mov		di, IDT_SEL
	mov		es, di
	xor		edi, edi
	mov		esi, idt_start
	mov		cx, idt_size/4
	rep		movsd

	; then load IDTR
	lidt	[idtr]
	sti

	ret


;=== DivByZeroEx ===============================================================
	section .data
div_by_zero_ex_str:		db	'Divide By Zero Exception', 0
	section .text
DivByZeroEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword div_by_zero_ex_str
	call	Printk
	jmp		Halt


;=== DebugEx ===================================================================
	section .data
debug_ex_str:			db	'Debug Exception', 0
dr_0:					db	0xA, 'dr0: ', 0
dr_1:					db	0xA, 'dr1: ', 0
dr_2:					db	0xA, 'dr2: ', 0
dr_3:					db	0xA, 'dr3: ', 0
dr_6:					db	0xA, 'dr6: ', 0
dr_7:					db	0xA, 'dr7: ', 0
	section .text
DebugEx:
	mov		ax, DATA32_SEL
	mov		ds, ax

	push	dword debug_ex_str
	call	Printk

	push	dword dr_0
	call	Printk
	mov		eax, dr0
	call	PrintD
	
	push	dword dr_1
	call	Printk
	mov		eax, dr1
	call	PrintD
	
	push	dword dr_2
	call	Printk
	mov		eax, dr2
	call	PrintD

	push	dword dr_3
	call	Printk
	mov		eax, dr3
	call	PrintD

	push	dword dr_6
	call	Printk
	mov		eax, dr6
	call	PrintD
	
	push	dword dr_7
	call	Printk
	mov		eax, dr7
	call	PrintD

	jmp		Halt


;=== NMI =======================================================================
	section .data
nmi_str:				db	'Non-Maskable Interrupt', 0
	section .text
NMI:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword nmi_str
	call	Printk
	jmp		Halt


;=== Int3Ex ====================================================================
	section .data
int3_ex_str:			db	'int3 instruction detected', 0
	section .text
Int3Ex:
	push	eax, ds

	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword int3_ex_str
	call	Printk

.exit
	pop		eax, ds
	iret
	

;=== OverflowEx ================================================================
	section .data
overflow_ex_str:		db	'Overflow Exception (generated by into)', 0
	section .text
OverflowEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword overflow_ex_str
	call	Printk
	jmp		Halt


;=== BoundsEx ==================================================================
	section .data
bounds_ex_str:			db	'Bounds Exception (generated by bounds)', 0
	section .text
BoundsEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword bounds_ex_str
	call	Printk
	jmp		Halt


;=== InvalidOpcodeEx ===========================================================
	section .data
invalid_opcode_ex_str:	db	'Invalid Opcode Exception', 0
	section .text
InvalidOpcodeEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword invalid_opcode_ex_str
	call	Printk
	jmp		Halt


;=== DevNotAvailEx =============================================================
	section .data
dev_not_avail_ex_str:	db	'Device Not Available Exception', 0
	section .text
DevNotAvailEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword dev_not_avail_ex_str
	call	Printk
	jmp		Halt


;=== DoubleFaultEx =============================================================
	section .data
double_fault_ex_str:	db	'Double Fault Exception', 0
	section .text
DoubleFaultEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword double_fault_ex_str
	call	Printk
	jmp		Halt


;=== CopSegOverrunEx ===========================================================
	section .data
cop_seg_ovr_ex_str:		db	'Coprocessor Segment Overrun Exception', 0
	section .text
CopSegOvrEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword cop_seg_ovr_ex_str
	call	Printk
	jmp		Halt


;=== InvalidTSSFault ===========================================================
	section .data
invalid_tss_fault_str:	db	'Invalid TSS fault', 0
	section .text
InvalidTSSFault:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword invalid_tss_fault_str
	call	Printk
	jmp		Halt


;=== SegNotPresentEx ===========================================================
	section .data
seg_not_pres_ex_str:	db	'Segment Not Present Exception', 0
	section .text
SegNotPresEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword seg_not_pres_ex_str
	call	Printk
	jmp		Halt


;=== StackFaultEx ==============================================================
	section .data
stack_fault_ex_str:		db	'Stack Fault Exception', 0
	section .text
StackFaultEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword stack_fault_ex_str
	call	Printk
	jmp		Halt


;=== GeneralProtEx =============================================================
	section .data
general_prot_ex_str:	db	'General Protection Exception', 0
	section .text
GeneralProtEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword general_prot_ex_str
	call	Printk
	jmp		Halt


;=== PageFaultEx ===============================================================
	section .data
page_fault_ex_str:		db	'Page Fault Exception', 0
	section .text
PageFaultEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword page_fault_ex_str
	call	Printk
	jmp		Halt


;=== FPErrorEx =================================================================
	section .data
fp_error_ex_str:		db	'Floating Point Error Exception', 0
	section .text
FPErrorEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword fp_error_ex_str
	call	Printk
	jmp		Halt


;=== AlignCheckEx ==============================================================
	section .data
align_check_ex_str:		db	'Alignment Check Exception', 0
	section .text
AlignCheckEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword align_check_ex_str
	call	Printk
	jmp		Halt


;=== MachineCheckEx ============================================================
	section .data
machine_check_ex_str:	db	'Machine Check Exception', 0
	section .text
MachineCheckEx:
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword machine_check_ex_str
	call	Printk
	jmp		Halt


;=== DefInt ====================================================================
	section .data
def_int_str:			db	'Default Interrupt', 0
	section .text
DefInt:
	push	eax, ds
	
	mov		ax, DATA32_SEL
	mov		ds, ax
	push	dword def_int_str
	call	Printk

	pop		eax, ds
	iret


	section .data
;=== Interrupt Descriptor Table ===
idtr:		dw	idt_size, IDT_ADDR, IDT_ADDR>>16

idt_start:
	gate CODE32_SEL, DivByZeroEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, DebugEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, NMI-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, Int3Ex-start, 0, D_IGATE32 |D_DPL2
	gate CODE32_SEL, OverflowEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, BoundsEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, InvalidOpcodeEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, DevNotAvailEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, DoubleFaultEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, CopSegOvrEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, InvalidTSSFault-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, SegNotPresEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, StackFaultEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, GeneralProtEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, PageFaultEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, DefInt-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, FPErrorEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, AlignCheckEx-start, 0, D_IGATE32 |D_DPL0
	gate CODE32_SEL, MachineCheckEx-start, 0, D_IGATE32 |D_DPL0
idt_end:

idt_size	equ	idt_end-idt_start
